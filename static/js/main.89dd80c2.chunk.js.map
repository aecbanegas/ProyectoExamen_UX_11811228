{"version":3,"sources":["NavBar.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","catch","query","textInput","value","props","genQuery","className","style","background","type","data-toggle","data-target","id","ref","placeholder","input","React","Component","App","qry","setState","search","fSubmit","e","preventDefault","datas","state","note","refs","current_datetime","Date","formatted_date","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","console","log","date","tags_origen","tags","String","data","split","push","localStorage","setItem","JSON","stringify","myForm","reset","focus","fRemove","i","splice","this","json","getItem","parse","onClick","map","arr","length","includes","buscar","key","tag","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.89dd80c2.chunk.js","sourcesContent":["import React from 'react';\n\nclass NavBar extends React.Component {\n    //metodo para obtener la informacion del input JSX de search\n    catch = (query) => {\n        query = this.textInput.value \n        this.props.genQuery(query)\n    }\n    \n    render() {\n        let query;\n        return (\n            <nav className=\"navbar navbar-light navbar-expand-md\" style={{ background: \"rgba(52, 20, 249, 0.57)\" }}>\n                <a className=\"navbar-brand text-white\">NoteIt</a>\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsibleNavbar\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"collapsibleNavbar\">\n                    <form ref=\"search\" className=\"form-inline ml-auto\">\n                        <input ref=\"wordsearch\" placeholder=\"Search...\" ref={(input) => { this.textInput = input }} onChange={()=>this.catch(query) }/>\n                    </form>\n                </div>\n            </nav>\n        );\n    }\n}\n\nexport default NavBar","import React, { Fragment} from 'react';\nimport './App.css';\nimport NavBar from './NavBar'\n\nclass App extends React.Component {\n  //Constructor base\n  constructor(props) {\n    super(props);\n    this.state = {\n      datas: [],\n      search:'',\n    }\n  }\n  //funcion que asigna la query que se trae desde navbar a App.js\n  genQuery = (qry) => {\n    this.setState({ search: qry })\n  }\n  //Al montar eel componente recupera informacion de local storage\n  componentDidMount() {\n    this.refs.note.focus();\n    const json = localStorage.getItem('datas');\n    const datas = JSON.parse(json) || [];\n    this.setState({ datas,});\n  }\n  //Al hacer click a insertar en el button Add Note de JSX se obtiene la informacion por medio de referencias y se guarda en local storage\n  fSubmit = (e) => {\n    const months = [\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\", \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"];\n    e.preventDefault();\n\n    let datas = this.state.datas;\n    let note = this.refs.note.value;\n    let current_datetime = new Date()\n    let formatted_date = current_datetime.getDate() + \"/\" + months[current_datetime.getMonth()] + \"/\" + current_datetime.getFullYear() + \" \" + current_datetime.getHours() + \":\" + current_datetime.getMinutes() + \":\" + current_datetime.getSeconds()\n    console.log(formatted_date)\n    let date = formatted_date;\n    let tags_origen = this.refs.tags.value;\n    console.log(String(tags_origen));\n    let tags = String(tags_origen).split(',');\n    let data = {\n      note, date, tags\n    }\n    datas.push(data);\n\n    this.setState({\n      datas: datas,\n    });\n    //Localstorage\n    localStorage.setItem('datas', JSON.stringify(datas));\n    this.refs.myForm.reset();\n    this.refs.note.focus();\n  }\n  //Funcion encargada de eliminar una nota, esta tambien se elimina de localstorage por igual\n  fRemove = (i) => {\n    let datas = this.state.datas;\n    datas.splice(i, 1);\n    this.setState({\n      datas: datas\n    });\n    localStorage.setItem('datas', JSON.stringify(datas));\n    this.refs.myForm.reset();\n    this.refs.note.focus();\n  }\n\n  render() {\n    let datas = this.state.datas;\n    return (\n      <Fragment>\n        <NavBar genQuery={this.genQuery}/>\n        <div className=\"App container-fluid\">\n          <form ref=\"myForm\">\n            <div className=\"form-group-lg\">\n              <label id=\"addNotes\" className=\"mt-2 mb-2 mx-2\">Add Notes:</label>\n              <input type=\"text\" ref=\"note\" placeholder=\"Your new note...\" className=\"formField\" />\n              <label id=\"addTags\" className=\"mt-2 mb-2 mx-2\">Add Tags:</label>\n              <input type=\"text\" ref=\"tags\" placeholder=\"e.g. tag1,tag2,tag3\" className=\"formField\" />\n              <button type=\"submit\" className=\"btn btn-outline-light mt-2 mb-2 mx-2\" style={{ background: \"rgba(52, 20, 249, 0.57)\" }} onClick={(e) => this.fSubmit(e)}>Add Note</button>\n            </div>\n          </form>\n          <ul className=\"list-group\">\n            {datas.map((data, i) =>\n            (buscar(data.tags, this.state.search)) && (\n              <li key={i} className=\"list-group-item d-flex flex-wrap justify-content-between\">\n                <div>\n                  <p className=\"text-justify text-break\">Note: {data.note}</p>\n                  <div className=\"d-flex flex-wrap\">Date: {data.date}</div>\n                  <div className=\"d-flex flex-wrap\">\n                    {data.tags.map((tag) =>\n                      <span className=\"badge badge-primary mt-2 mb-2 mx-2\" style={{ background: \"rgba(52, 20, 249, 0.57)\" }}>{tag}</span>\n                    )}\n                  </div>\n                </div>\n                <div>\n                  <button onClick={() => this.fRemove(i)} className=\"btn btn-outline-dark mt-2 mb-2 mx-2\">remove </button>\n                </div>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\n\nfunction buscar(arr, qry){\n  if (!arr.length) {\n      return true\n  }\n  for (let i = 0; i < arr.length; i++) {\n      const el = arr[i];\n      if (el.includes(qry)) {\n         return true \n      }\n  }\n  return false\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n//\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}